openapi: 3.0.3
info:
  title: Readify
  version: 1.0.0
  description: Book Management App
paths:
  /api/:
    get:
      operationId: root_retrieve
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/books/:
    get:
      operationId: books_retrieve
      tags:
      - books
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: books_create
      tags:
      - books
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/books/{book_id}/:
    get:
      operationId: books_retrieve_2
      parameters:
      - in: path
        name: book_id
        schema:
          type: integer
        required: true
      tags:
      - books
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/books/{book_id}/delete/:
    delete:
      operationId: books_delete_destroy
      parameters:
      - in: path
        name: book_id
        schema:
          type: integer
        required: true
      tags:
      - books
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/my-books/:
    get:
      operationId: my_books_retrieve
      tags:
      - my-books
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/profile/:
    get:
      operationId: profile_retrieve
      tags:
      - profile
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
  /api/profile/update/:
    put:
      operationId: profile_update_update
      tags:
      - profile
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/reading-lists/:
    get:
      operationId: reading_lists_retrieve
      tags:
      - reading-lists
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: reading_lists_create
      tags:
      - reading-lists
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/reading-lists/{list_id}/:
    get:
      operationId: reading_lists_retrieve_2
      parameters:
      - in: path
        name: list_id
        schema:
          type: integer
        required: true
      tags:
      - reading-lists
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: reading_lists_update
      parameters:
      - in: path
        name: list_id
        schema:
          type: integer
        required: true
      tags:
      - reading-lists
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: reading_lists_destroy
      parameters:
      - in: path
        name: list_id
        schema:
          type: integer
        required: true
      tags:
      - reading-lists
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/reading-lists/{list_id}/items/:
    post:
      operationId: reading_lists_items_create
      parameters:
      - in: path
        name: list_id
        schema:
          type: integer
        required: true
      tags:
      - reading-lists
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: reading_lists_items_destroy
      parameters:
      - in: path
        name: list_id
        schema:
          type: integer
        required: true
      tags:
      - reading-lists
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/reading-lists/{list_id}/items/{item_id}/:
    post:
      operationId: reading_lists_items_create_2
      parameters:
      - in: path
        name: item_id
        schema:
          type: integer
        required: true
      - in: path
        name: list_id
        schema:
          type: integer
        required: true
      tags:
      - reading-lists
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: reading_lists_items_destroy_2
      parameters:
      - in: path
        name: item_id
        schema:
          type: integer
        required: true
      - in: path
        name: list_id
        schema:
          type: integer
        required: true
      tags:
      - reading-lists
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/register/:
    post:
      operationId: register_create
      tags:
      - register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
          description: ''
  /api/token/:
    post:
      operationId: token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyTokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
components:
  schemas:
    MyTokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
    Profile:
      type: object
      properties:
        full_name:
          type: string
          maxLength: 1000
        bio:
          type: string
          maxLength: 100
        image:
          type: string
          format: uri
      required:
      - bio
      - full_name
    Register:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 254
        username:
          type: string
          maxLength: 100
        password:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
      - email
      - password
      - password2
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
